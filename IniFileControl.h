/****************************************************************************** 
	INI File Control Class ヘッダファイル
	
	File name: IniFileControl.h
	Version:	2.00 (2012/04/27)
	Compiler:	Visual Studio 2010 Proffesional

	<機能> .ini ファイルに対してデータ読み込み＆書き込みを行う
	<関連ファイル>
	EventControl.h: クラス本体のコード
	<更新履歴>
	2008/06/03 Start-Ver.1.0完成
	2008/06/16 データの削除追加-Ver.1.1
	2012/04/27 UNICODE対応.コメント一新 -Ver 2.0
	<特記事項>
	カレントディレクトリにIniフォルダを自動生成し，.iniファイルを生成する．
	⇒自動生成でいいのか？呼び出し側でファイルパスを送る場合はどうなる？
	⇒呼び出し側のアプリケーションで特にiniファイルの存在を意識せずとも良い
	場合は，このままでOK．
	＜著作権表示＞
	Copyright © 2012 Keisuke SHIMA All rights reserved.
******************************************************************************/
#ifndef INC_INIFILECONTROL_H
#define INC_INIFILECONTROL_H

#include <windows.h>
#include "ConvertUCode.h"	//UNICODE変換

//デフォルトパラメータ-----------------
#define DEF_INI_BUFFSIZE		2048
#define DEF_INI_DEFAULTAPPNAME	TEXT("Default")	//アプリケーション名
#define DEF_INI_DEFAULTFNAME	TEXT("info.ini")	//ファイル名
#define DEF_INI_DEFAULTMSG		TEXT("No data")	//エラーメッセージ
//-------------------------------------

/*****************************************************************************/
class IniFileControl
{
private:
	TCHAR AppName[DEF_INI_BUFFSIZE];		//アプリケーション名
	TCHAR DefMsg[DEF_INI_BUFFSIZE];			//デフォルトメッセージ
	TCHAR FileName[DEF_INI_BUFFSIZE];		//iniファイル名
	TCHAR CrtDIRName[DEF_INI_BUFFSIZE];		//カレントディレクトリ名
	int MaxDtSize;							//格納文字列の最大サイズ
public:
	//-----------------------------------------------------------------------------
	//コンストラクタ
	IniFileControl( void );					
	//-----------------------------------------------------------------------------
	//デストラクタ
	~IniFileControl( void );

	//-----------------------------------------------------------------------------
	//	<機能>　保存・読み込みファイル名の設定.
	//	<入力> 
	//	TCHAR *strName: 設定するファイル名
	//	<出力> なし
	//	<戻り値>
	//	int : 常に1
	//	<特記事項> 
	//	カレントディレクトリ上のファイル名を設定する．
	//-----------------------------------------------------------------------------
	int SetFileName( TCHAR *strName );

	//-----------------------------------------------------------------------------
	//	<機能>　文字列の書き込み
	//	<入力> 
	//	TCHAR *strKey: キーの名称
	//	TCHAR *strData:	書き込む文字列データ
	//	<出力> なし
	//	<戻り値>
	//	BOOL : 文字列の格納に成功= 0以外の値
	//	<特記事項> 
	//	設定済みiniファイルに文字列データを書き込む．
	//-----------------------------------------------------------------------------
	BOOL WriteString( TCHAR *strKey, TCHAR *strData );

	//-----------------------------------------------------------------------------
	//	<機能>　文字列の読み込み
	//	<入力> 
	//	TCHAR *strKey: キーの名称
	//	TCHAR *strBuff:	読み出した文字列データが格納される配列バッファへのポインタ
	//	<出力> なし
	//	<戻り値>
	//	DWORD : バッファに格納された文字数
	//	<特記事項> 
	//	設定済みiniファイルから文字列データを読み出す．
	//-----------------------------------------------------------------------------
	DWORD ReadString( TCHAR *strKey, TCHAR *strBuff );

	//-----------------------------------------------------------------------------
	//	<機能>　アプリケーション名の設定
	//	<入力> 
	//	TCHAR *strName: アプリケーション名
	//	<出力> なし
	//	<戻り値>
	//	int : 常に1
	//	<特記事項> 
	//	設定済みiniファイルにアプリケーション名を設定する．
	//-----------------------------------------------------------------------------
	int SetApplicationName( TCHAR *strName );

	//-----------------------------------------------------------------------------
	//	<機能>　デフォルトメッセージの設定
	//	<入力> 
	//	TCHAR *strMsg: デフォルトメッセージ
	//	<出力> なし
	//	<戻り値>
	//	int : 常に1
	//	<特記事項> なし
	//-----------------------------------------------------------------------------
	int SetDefaultMessage( TCHAR *strMsg );

	//-----------------------------------------------------------------------------
	//	<機能>　データ書き込み(文字列型)
	//	<入力> 
	//	TCHAR *strKey: キーの名称
	//	TCHAR *strData: 格納する文字列へのポインタ
	//	<出力> なし
	//	<戻り値>
	//	BOOL : 文字列の格納に成功= 0以外の値
	//	<特記事項> なし
	//-----------------------------------------------------------------------------
	BOOL WriteData( TCHAR *strKey, TCHAR *strData );

	//-----------------------------------------------------------------------------
	//	<機能>　データ書き込み(int型)
	//	<入力> 
	//	TCHAR *strKey: キーの名称
	//	int data: 格納データ
	//	<出力> なし
	//	<戻り値>
	//	BOOL : データの格納に成功= 0以外の値
	//	<特記事項> なし
	//-----------------------------------------------------------------------------
	BOOL WriteData( TCHAR *strKey, int data );

	//-----------------------------------------------------------------------------
	//	<機能>　データ書き込み(double型)
	//	<入力> 
	//	TCHAR *strKey: キーの名称
	//	double data: 格納データ
	//	<出力> なし
	//	<戻り値>
	//	BOOL : データの格納に成功= 0以外の値
	//	<特記事項> なし
	//-----------------------------------------------------------------------------
	BOOL WriteData( TCHAR *strKey, double data );

	//-----------------------------------------------------------------------------
	//	<機能>　データ読み込み(文字列型)
	//	<入力> 
	//	TCHAR *strKey: キーの名称
	//	TCHAR *strBuff: 読み出した文字列が格納される配列バッファへのポインタ
	//	<出力> なし
	//	<戻り値>
	//	DWORD : バッファに格納された文字数
	//	<特記事項> なし
	//-----------------------------------------------------------------------------
	DWORD ReadData( TCHAR *strKey, TCHAR *strBuff );

	//-----------------------------------------------------------------------------
	//	<機能>　データ読み込み(int型)
	//	<入力> 
	//	TCHAR *strKey: キーの名称
	//	int *data: データが格納される領域へのポインタ
	//	<出力> なし
	//	<戻り値>
	//	DWORD : バッファに格納されたデータの桁数
	//	<特記事項> なし
	//-----------------------------------------------------------------------------
	DWORD ReadData( TCHAR *strKey, int *data );

	//-----------------------------------------------------------------------------
	//	<機能>　データ読み込み(double型)
	//	<入力> 
	//	TCHAR *strKey: キーの名称
	//	double *data: データが格納される領域へのポインタ
	//	<出力> なし
	//	<戻り値>
	//	DWORD : バッファに格納されたデータの桁数
	//	<特記事項> なし
	//-----------------------------------------------------------------------------
	DWORD ReadData( TCHAR *strKey, double *data );

	//-----------------------------------------------------------------------------
	//	<機能>　指定キーのデータを削除
	//	<入力> 
	//	TCHAR *AppName: 対象アプリケーション名
	//	TCHAR *strKey: キーの名称(NULL指定で全要素削除)
	//	<出力> なし
	//	<戻り値>
	//	BOOL : 成功時=非負値
	//	<特記事項> なし
	//-----------------------------------------------------------------------------
	BOOL DeleteData( TCHAR *AppName, TCHAR *strKey );
};
#endif